/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gsbperso;

import com.mysql.jdbc.Connection;
import java.sql.Array;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nc
 */
public class InterfaceGraphique extends javax.swing.JFrame {

    /**
     * attribut qui indique si l'etudiant est connecté ou non
     */
    private boolean connecte;
    public Personne personne;

    /**
     * interface graphique
     */
    private Connexion fenConnexion;
    private Deconnexion fenDeconnexion;

    /**
     * constructeur : Creates new form InterfaceGraphique
     *
     */
    public InterfaceGraphique() {
        initComponents();
        //par defaut, la connexion est inactive
        this.connecte = false;
        //element du menu de deconnexion grisé
        this.majConnexion();
        //centrage
        this.setLocationRelativeTo(null);
        //titre 
        this.setTitle("Gestion du Personnel");
        //On fait en sorte de ne pas voir les boutons si l'on est pas connecté.
        this.jMenuCV.setVisible(false);
        this.MenuInformation.setVisible(false);
        this.jMenuAction.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelFormation.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelPromouv.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jPanelInfoPerso = new javax.swing.JPanel();
        labelMail = new javax.swing.JLabel();
        labelSalaire = new javax.swing.JLabel();
        labelPosition = new javax.swing.JLabel();
        labelWeb = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jTextFieldPrenom = new javax.swing.JTextField();
        jTextFieldAdresse = new javax.swing.JTextField();
        jTextFieldTelPerso = new javax.swing.JTextField();
        jTextFieldTelPro = new javax.swing.JTextField();
        jTextFieldSite = new javax.swing.JTextField();
        labelduSalaire = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldCP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelNom = new javax.swing.JLabel();
        labelPrenom = new javax.swing.JLabel();
        jTextFieldVille = new javax.swing.JTextField();
        jButtonValider = new javax.swing.JButton();
        labelAdresse = new javax.swing.JLabel();
        jButtonAnnuler = new javax.swing.JButton();
        labelTelPerso = new javax.swing.JLabel();
        labelTelPro = new javax.swing.JLabel();
        jButtonRetour = new javax.swing.JButton();
        jLabelPosition = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListmail = new javax.swing.JList<>();
        jButtonAjoutEmail = new javax.swing.JButton();
        jTextFieldAjoutEmail = new javax.swing.JTextField();
        jButtonSuppEmail = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanelFormation = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListeForm = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxInfo = new javax.swing.JComboBox<>();
        jTextFieldAjout = new javax.swing.JTextField();
        jButtonAjout = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonReturn = new javax.swing.JButton();
        jLabelPermis = new javax.swing.JLabel();
        jButtonPermis = new javax.swing.JButton();
        jPanelModif = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePosition = new javax.swing.JTable();
        jButtonRet = new javax.swing.JButton();
        jPanelPromouv = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablePromouv = new javax.swing.JTable();
        jButReturn = new javax.swing.JButton();
        nomMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        connexionMenuItem = new javax.swing.JMenuItem();
        deconnexionMenuItem = new javax.swing.JMenuItem();
        SortieMenuItem = new javax.swing.JMenuItem();
        jMenuCV = new javax.swing.JMenu();
        MenuGenererCV = new javax.swing.JMenuItem();
        MenuInformation = new javax.swing.JMenu();
        jMenuInfoPerso = new javax.swing.JMenuItem();
        jMenuFormations = new javax.swing.JMenuItem();
        jMenuAction = new javax.swing.JMenu();
        jMenuModif = new javax.swing.JMenuItem();
        jMenuCreer = new javax.swing.JMenuItem();
        jMenuPromouvoir = new javax.swing.JMenuItem();
        aideMenu = new javax.swing.JMenu();
        aproposMenuItem = new javax.swing.JMenuItem();
        nomjMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktopPane.setBorder(new javax.swing.border.MatteBorder(null));

        jPanelInfoPerso.setBackground(new java.awt.Color(204, 204, 204));

        labelMail.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelMail.setForeground(new java.awt.Color(153, 153, 153));
        labelMail.setText("Email");

        labelSalaire.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelSalaire.setForeground(new java.awt.Color(153, 153, 153));
        labelSalaire.setText("Salaire");

        labelPosition.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelPosition.setForeground(new java.awt.Color(153, 153, 153));
        labelPosition.setText("Position");

        labelWeb.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelWeb.setForeground(new java.awt.Color(153, 153, 153));
        labelWeb.setText("Site Web");

        jTextFieldTelPerso.setToolTipText("Format Français, sans espace");

        jTextFieldTelPro.setToolTipText("Format Français, sans espace");

        labelduSalaire.setForeground(new java.awt.Color(204, 204, 204));
        labelduSalaire.setText(" ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setText("Code Postal");

        jTextFieldCP.setToolTipText("Format Français");

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("Vos Informations Personnelles");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        jLabel3.setText("Ville");

        labelNom.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelNom.setForeground(new java.awt.Color(153, 153, 153));
        labelNom.setText("Nom");

        labelPrenom.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelPrenom.setForeground(new java.awt.Color(153, 153, 153));
        labelPrenom.setText("Prénom");

        jButtonValider.setText("Valider");
        jButtonValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValiderActionPerformed(evt);
            }
        });

        labelAdresse.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelAdresse.setForeground(new java.awt.Color(153, 153, 153));
        labelAdresse.setText("Adresse");

        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        labelTelPerso.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelTelPerso.setForeground(new java.awt.Color(153, 153, 153));
        labelTelPerso.setText("Téléphone Personnel");

        labelTelPro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelTelPro.setForeground(new java.awt.Color(153, 153, 153));
        labelTelPro.setText("Téléphone Professionnel");

        jButtonRetour.setText("Retour");
        jButtonRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetourActionPerformed(evt);
            }
        });

        jLabelPosition.setForeground(new java.awt.Color(204, 204, 204));

        jListmail.setModel(new DefaultListModel());
        jScrollPane3.setViewportView(jListmail);

        jButtonAjoutEmail.setText("Ajouter");
        jButtonAjoutEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjoutEmailActionPerformed(evt);
            }
        });

        jButtonSuppEmail.setText("Supprimer");
        jButtonSuppEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSuppEmailActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelInfoPersoLayout = new org.jdesktop.layout.GroupLayout(jPanelInfoPerso);
        jPanelInfoPerso.setLayout(jPanelInfoPersoLayout);
        jPanelInfoPersoLayout.setHorizontalGroup(
            jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelInfoPersoLayout.createSequentialGroup()
                .add(0, 206, Short.MAX_VALUE)
                .add(jLabel1)
                .add(199, 199, 199))
            .add(jPanelInfoPersoLayout.createSequentialGroup()
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanelInfoPersoLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelInfoPersoLayout.createSequentialGroup()
                        .add(318, 318, 318)
                        .add(jButtonAjoutEmail)
                        .add(58, 58, 58)
                        .add(jButtonSuppEmail)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelInfoPersoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelInfoPersoLayout.createSequentialGroup()
                        .add(106, 106, 106)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(labelSalaire)
                            .add(labelPosition))
                        .add(28, 28, 28)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(labelduSalaire, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabelPosition, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(jPanelInfoPersoLayout.createSequentialGroup()
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelInfoPersoLayout.createSequentialGroup()
                                .add(jButtonValider)
                                .add(51, 51, 51)
                                .add(jButtonAnnuler))
                            .add(jPanelInfoPersoLayout.createSequentialGroup()
                                .add(64, 64, 64)
                                .add(jButtonRetour)))
                        .add(160, 160, 160))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelInfoPersoLayout.createSequentialGroup()
                        .add(67, 67, 67)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(labelPrenom)
                            .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel2)
                                    .add(jLabel3))
                                .add(jPanelInfoPersoLayout.createSequentialGroup()
                                    .add(27, 27, 27)
                                    .add(labelAdresse)))
                            .add(labelNom))
                        .add(34, 34, 34)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldPrenom)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldAdresse)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldCP)
                            .add(jTextFieldVille)
                            .add(jTextFieldNom)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelInfoPersoLayout.createSequentialGroup()
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(labelTelPro)
                                .add(labelMail))
                            .add(jPanelInfoPersoLayout.createSequentialGroup()
                                .add(20, 20, 20)
                                .add(labelTelPerso))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, labelWeb))
                        .add(28, 28, 28)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextFieldSite)
                            .add(jScrollPane3)
                            .add(jTextFieldTelPerso)
                            .add(jTextFieldTelPro)
                            .add(jTextFieldAjoutEmail))))
                .add(146, 146, 146))
        );
        jPanelInfoPersoLayout.setVerticalGroup(
            jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelInfoPersoLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jLabel1)
                .add(60, 60, 60)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelNom)
                    .add(jTextFieldNom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(20, 20, 20)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldPrenom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelPrenom))
                .add(47, 47, 47)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldAdresse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelAdresse))
                .add(18, 18, 18)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldCP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .add(18, 18, 18)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jTextFieldVille, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(43, 43, 43)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jTextFieldTelPerso, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelTelPerso))
                .add(19, 19, 19)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldTelPro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelTelPro))
                .add(21, 21, 21)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelMail)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jTextFieldAjoutEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonAjoutEmail)
                    .add(jButtonSuppEmail))
                .add(18, 18, 18)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldSite, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelWeb))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelduSalaire)
                    .add(labelSalaire))
                .add(18, 18, 18)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelPosition)
                    .add(jLabelPosition, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonValider)
                    .add(jButtonAnnuler))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonRetour)
                .add(66, 66, 66))
        );

        desktopPane.add(jPanelInfoPerso);
        jPanelInfoPerso.setBounds(0, 0, 770, 810);

        jPanelFormation.setBackground(new java.awt.Color(204, 204, 204));

        jListeForm.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(jListeForm);

        jLabel5.setFont(new java.awt.Font("Sitka Text", 3, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 153, 153));
        jLabel5.setText("Formations, Stages, Langues, Permis, Hobbies");

        jComboBoxInfo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Formations", "Stages", "Langues", "Hobbies", "Expérience" }));
        jComboBoxInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxInfoActionPerformed(evt);
            }
        });

        jTextFieldAjout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAjoutActionPerformed(evt);
            }
        });

        jButtonAjout.setText("Ajouter");
        jButtonAjout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjoutActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonReturn.setText("Retour");
        jButtonReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReturnActionPerformed(evt);
            }
        });

        jLabelPermis.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jLabelPermis.setForeground(new java.awt.Color(153, 153, 153));
        jLabelPermis.setText("Permis");

        jButtonPermis.setText("Changer le statut du Permis");
        jButtonPermis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPermisActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelFormationLayout = new org.jdesktop.layout.GroupLayout(jPanelFormation);
        jPanelFormation.setLayout(jPanelFormationLayout);
        jPanelFormationLayout.setHorizontalGroup(
            jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelFormationLayout.createSequentialGroup()
                .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelFormationLayout.createSequentialGroup()
                        .add(197, 197, 197)
                        .add(jLabel5))
                    .add(jPanelFormationLayout.createSequentialGroup()
                        .add(359, 359, 359)
                        .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButtonPermis)
                            .add(jPanelFormationLayout.createSequentialGroup()
                                .add(jButtonAjout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(43, 43, 43)
                                .add(jButtonSupprimer)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFormationLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jButtonReturn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(262, 262, 262))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFormationLayout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFormationLayout.createSequentialGroup()
                        .add(jComboBoxInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(100, 100, 100)
                        .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(jTextFieldAjout)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE))
                        .add(65, 65, 65))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFormationLayout.createSequentialGroup()
                        .add(jLabelPermis, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 224, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(475, 475, 475))))
        );
        jPanelFormationLayout.setVerticalGroup(
            jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelFormationLayout.createSequentialGroup()
                .add(28, 28, 28)
                .add(jLabel5)
                .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelFormationLayout.createSequentialGroup()
                        .add(71, 71, 71)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 172, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanelFormationLayout.createSequentialGroup()
                        .add(155, 155, 155)
                        .add(jComboBoxInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(59, 59, 59)
                .add(jTextFieldAjout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(64, 64, 64)
                .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonAjout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonSupprimer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jButtonReturn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 75, Short.MAX_VALUE)
                .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelPermis)
                    .add(jButtonPermis))
                .add(129, 129, 129))
        );

        desktopPane.add(jPanelFormation);
        jPanelFormation.setBounds(0, 0, 770, 760);

        jLabel6.setFont(new java.awt.Font("Sylfaen", 3, 24)); // NOI18N
        jLabel6.setText("Modifier la position d'un employé");

        jTablePosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom", "Prenom", "Position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePosition.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePositionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTablePosition);
        if (jTablePosition.getColumnModel().getColumnCount() > 0) {
            jTablePosition.getColumnModel().getColumn(0).setResizable(false);
        }

        jButtonRet.setText("Retour");
        jButtonRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelModifLayout = new org.jdesktop.layout.GroupLayout(jPanelModif);
        jPanelModif.setLayout(jPanelModifLayout);
        jPanelModifLayout.setHorizontalGroup(
            jPanelModifLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelModifLayout.createSequentialGroup()
                .addContainerGap(117, Short.MAX_VALUE)
                .add(jPanelModifLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelModifLayout.createSequentialGroup()
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 382, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(122, 122, 122))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelModifLayout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 524, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(38, 38, 38))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelModifLayout.createSequentialGroup()
                        .add(jButtonRet)
                        .add(276, 276, 276))))
        );
        jPanelModifLayout.setVerticalGroup(
            jPanelModifLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelModifLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel6)
                .add(36, 36, 36)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 476, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 45, Short.MAX_VALUE)
                .add(jButtonRet)
                .add(41, 41, 41))
        );

        desktopPane.add(jPanelModif);
        jPanelModif.setBounds(0, 0, 679, 669);

        jLabel7.setFont(new java.awt.Font("Sylfaen", 0, 24)); // NOI18N
        jLabel7.setText("Promouvoir ou Retrograder un Employé");

        jTablePromouv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom", "Prenom", "Position"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePromouv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePromouvMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTablePromouv);
        if (jTablePromouv.getColumnModel().getColumnCount() > 0) {
            jTablePromouv.getColumnModel().getColumn(0).setResizable(false);
            jTablePromouv.getColumnModel().getColumn(1).setResizable(false);
            jTablePromouv.getColumnModel().getColumn(2).setResizable(false);
            jTablePromouv.getColumnModel().getColumn(3).setResizable(false);
        }

        jButReturn.setText("Retour");

        org.jdesktop.layout.GroupLayout jPanelPromouvLayout = new org.jdesktop.layout.GroupLayout(jPanelPromouv);
        jPanelPromouv.setLayout(jPanelPromouvLayout);
        jPanelPromouvLayout.setHorizontalGroup(
            jPanelPromouvLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelPromouvLayout.createSequentialGroup()
                .add(329, 329, 329)
                .add(jButReturn)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelPromouvLayout.createSequentialGroup()
                .addContainerGap(171, Short.MAX_VALUE)
                .add(jPanelPromouvLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelPromouvLayout.createSequentialGroup()
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(147, 147, 147))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelPromouvLayout.createSequentialGroup()
                        .add(jLabel7)
                        .add(178, 178, 178))))
        );
        jPanelPromouvLayout.setVerticalGroup(
            jPanelPromouvLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelPromouvLayout.createSequentialGroup()
                .add(38, 38, 38)
                .add(jLabel7)
                .add(39, 39, 39)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(65, 65, 65)
                .add(jButReturn)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        desktopPane.add(jPanelPromouv);
        jPanelPromouv.setBounds(0, 0, 770, 810);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Personnel");

        connexionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        connexionMenuItem.setMnemonic('o');
        connexionMenuItem.setText("Connexion");
        connexionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connexionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(connexionMenuItem);

        deconnexionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        deconnexionMenuItem.setMnemonic('s');
        deconnexionMenuItem.setText("Déconnexion");
        deconnexionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnexionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(deconnexionMenuItem);

        SortieMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SortieMenuItem.setMnemonic('x');
        SortieMenuItem.setText("Sortie");
        SortieMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortieMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(SortieMenuItem);

        nomMenuBar.add(fileMenu);

        jMenuCV.setText("CV");

        MenuGenererCV.setText("Générer au format PDF");
        jMenuCV.add(MenuGenererCV);

        nomMenuBar.add(jMenuCV);

        MenuInformation.setText("Informations");

        jMenuInfoPerso.setText("Informations Personnelles");
        jMenuInfoPerso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuInfoPersoActionPerformed(evt);
            }
        });
        MenuInformation.add(jMenuInfoPerso);

        jMenuFormations.setText("Formations/Stages/Langues etc...");
        jMenuFormations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFormationsActionPerformed(evt);
            }
        });
        MenuInformation.add(jMenuFormations);

        nomMenuBar.add(MenuInformation);

        jMenuAction.setText("Actions");

        jMenuModif.setText("Modifier la position");
        jMenuModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuModifActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuModif);

        jMenuCreer.setText("Créer un Employé");
        jMenuAction.add(jMenuCreer);

        jMenuPromouvoir.setText("Promouvoir/Retrograder un Employé");
        jMenuPromouvoir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPromouvoirActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuPromouvoir);

        nomMenuBar.add(jMenuAction);

        aideMenu.setMnemonic('h');
        aideMenu.setText("Aide");

        aproposMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aproposMenuItem.setMnemonic('c');
        aproposMenuItem.setText("A propos");
        aproposMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aproposMenuItemActionPerformed(evt);
            }
        });
        aideMenu.add(aproposMenuItem);

        nomMenuBar.add(aideMenu);
        nomMenuBar.add(nomjMenu);

        setJMenuBar(nomMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(desktopPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(desktopPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SortieMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortieMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_SortieMenuItemActionPerformed

    private void connexionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connexionMenuItemActionPerformed
        // TODO add your handling code here:

        /**
         * création de la fenetre de connexion et attachement de cette dernière
         * à l'interface maj de connecte en retour
         */
        this.fenConnexion = new Connexion(this, true);
        this.fenConnexion.setVisible(true);

        //JOptionPane.showMessageDialog(this, "cc");
    }//GEN-LAST:event_connexionMenuItemActionPerformed

    private void deconnexionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deconnexionMenuItemActionPerformed
        // TODO add your handling code here:
        fenDeconnexion = new Deconnexion(this, true);
        this.fenDeconnexion.setVisible(true);
    }//GEN-LAST:event_deconnexionMenuItemActionPerformed

    private void aproposMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aproposMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aproposMenuItemActionPerformed

    private void jMenuInfoPersoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuInfoPersoActionPerformed
        this.jPanelInfoPerso.setVisible(true);
        this.jPanelFormation.setVisible(false);
        this.jPanelInfoPerso.setOpaque(false);
        this.jPanelModif.setVisible(false);
        this.jTextFieldNom.setText(this.personne.getNom());
        this.jTextFieldPrenom.setText(this.personne.getPrenom());
        this.jTextFieldAdresse.setText(this.personne.getAdresse_rue());
        this.jTextFieldCP.setText(this.personne.getAdresse_CP());
        this.jTextFieldVille.setText(this.personne.getAdresse_ville());
        this.jTextFieldTelPerso.setText(this.personne.getTelPerso());
        this.jTextFieldTelPro.setText(this.personne.getTelPro());
        this.jLabelPosition.setText(this.personne.getPosition());
        this.jTextFieldSite.setText(this.personne.getSite());
        this.labelduSalaire.setText(this.personne.getSalaire() + " euros");
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select libelle_email from cv_email where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                DefaultListModel Select = (DefaultListModel) jListmail.getModel();
                Select.clear();
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString("libelle_email"));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuInfoPersoActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        this.jTextFieldNom.setText(this.personne.getNom());
        this.jTextFieldPrenom.setText(this.personne.getPrenom());
        this.jTextFieldAdresse.setText(this.personne.getAdresse_rue());
        this.jTextFieldCP.setText(this.personne.getAdresse_CP());
        this.jTextFieldVille.setText(this.personne.getAdresse_ville());
        this.jTextFieldTelPerso.setText(this.personne.getTelPerso());
        this.jTextFieldTelPro.setText(this.personne.getTelPro());
        this.jLabelPosition.setText(this.personne.getPosition());
        this.jTextFieldSite.setText(this.personne.getSite());
        this.labelduSalaire.setText(this.personne.getSalaire() + " euros");
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetourActionPerformed
        this.jPanelInfoPerso.setVisible(false);
    }//GEN-LAST:event_jButtonRetourActionPerformed

    private void jButtonValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValiderActionPerformed
        Singleton.requeteAction("update utilisateurs set nom='" + this.jTextFieldNom.getText() + "', prenom='" + this.jTextFieldPrenom.getText() + "', adresse_rue='" + this.jTextFieldAdresse.getText() + "', adresse_cp='" + this.jTextFieldCP.getText() + "', adresse_ville='" + this.jTextFieldVille.getText() + "', tel_personnel='" + this.jTextFieldTelPerso.getText() + "', tel_professionnel='" + this.jTextFieldTelPro.getText() + "', site_web='" + this.jTextFieldSite.getText() + "' where id_utilisateur = " + this.personne.getId());
        this.personne.setNom(this.jTextFieldNom.getText());
        this.personne.setPrenom(this.jTextFieldPrenom.getText());
        this.personne.setAdresse_rue(this.jTextFieldAdresse.getText());
        this.personne.setAdresse_CP(this.jTextFieldCP.getText());
        this.personne.setAdresse_ville(this.jTextFieldVille.getText());
        this.personne.setTelPerso(this.jTextFieldTelPerso.getText());
        this.personne.setTelPro(this.jTextFieldTelPro.getText());
        this.personne.setSite(this.jTextFieldSite.getText());
    }//GEN-LAST:event_jButtonValiderActionPerformed

    private void jMenuFormationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFormationsActionPerformed
        this.jPanelFormation.setVisible(true);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelFormation.setOpaque(false);        
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select libelle_formation from cv_formation where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
                Select.clear();
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString("libelle_formation"));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (this.personne.getPermis() == 1) {
            jLabelPermis.setText("Titulaire du Permis B");
        } else {
            jLabelPermis.setText("Non Titulaire du Permis B");
        }
    }//GEN-LAST:event_jMenuFormationsActionPerformed

    private void jButtonReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReturnActionPerformed
        this.jPanelFormation.setVisible(false);
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
    }//GEN-LAST:event_jButtonReturnActionPerformed

    private void jComboBoxInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxInfoActionPerformed
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
        try {
            String tuple = "";
            String libelle = "";
            int choix = jComboBoxInfo.getSelectedIndex();
            switch (choix) {
                case 0:
                    tuple = "cv_formation";
                    libelle = "libelle_formation";
                    break;
                case 1:
                    tuple = "cv_stages";
                    libelle = "libelle_stage";
                    break;
                case 2:
                    tuple = "cv_langue";
                    libelle = "libelle_langue";
                    break;
                case 3:
                    tuple = "cv_centre_interet";
                    libelle = "libelle_centre_interet";
                    break;
                case 4:
                    tuple = "cv_experience_prof";
                    libelle = "libelle_experience_prof";
                    break;
                default:
                    break;
            }
            ResultSet lignesRetournees = Singleton.requeteSelection("select " + libelle + " from " + tuple + " where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString(libelle));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBoxInfoActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        String texte = jListeForm.getSelectedValue();
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
        try {
            String tuple = "";
            String libelle = "";
            int choix = jComboBoxInfo.getSelectedIndex();
            switch (choix) {
                case 0:
                    tuple = "cv_formation";
                    libelle = "libelle_formation";
                    break;
                case 1:
                    tuple = "cv_stages";
                    libelle = "libelle_stage";
                    break;
                case 2:
                    tuple = "cv_langue";
                    libelle = "libelle_langue";
                    break;
                case 3:
                    tuple = "cv_centre_interet";
                    libelle = "libelle_centre_interet";
                    break;
                case 4:
                    tuple = "cv_experience_prof";
                    libelle = "libelle_experience_prof";
                    break;
                default:
                    break;
            }
            Singleton.requeteAction("delete from " + tuple + " where id_utilisateur = " + this.personne.getId() + " and " + libelle + " = '" + texte + "'");
            ResultSet lignesRetournees = Singleton.requeteSelection("select " + libelle + " from " + tuple + " where id_utilisateur = " + this.personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString(libelle));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonAjoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjoutActionPerformed
        String ajout = this.jTextFieldAjout.getText();
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
        try {
            String tuple = "";
            String libelle = "";
            int choix = jComboBoxInfo.getSelectedIndex();
            switch (choix) {
                case 0:
                    tuple = "cv_formation";
                    libelle = "libelle_formation";
                    break;
                case 1:
                    tuple = "cv_stages";
                    libelle = "libelle_stage";
                    break;
                case 2:
                    tuple = "cv_langue";
                    libelle = "libelle_langue";
                    break;
                case 3:
                    tuple = "cv_centre_interet";
                    libelle = "libelle_centre_interet";
                    break;
                case 4:
                    tuple = "cv_experience_prof";
                    libelle = "libelle_experience_prof";
                    break;
                default:
                    break;
            }
            Singleton.requeteAction("insert into " + tuple + " (id_utilisateur," + libelle + ") VALUES(" + personne.getId() + ",'" + ajout + "');");
            ResultSet lignesRetournees = Singleton.requeteSelection("select " + libelle + " from " + tuple + " where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString(libelle));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.jTextFieldAjout.setText("");
    }//GEN-LAST:event_jButtonAjoutActionPerformed

    private void jTextFieldAjoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAjoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAjoutActionPerformed

    private void jButtonPermisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPermisActionPerformed
        int permis;
        if (this.personne.getPermis() == 0) {
            permis = 1;
            this.personne.setPermis(1);
        } else {
            permis = 0;
            this.personne.setPermis(0);
        }
        Singleton.requeteAction("update utilisateurs set permis = " + permis + " where id_utilisateur = " + this.personne.getId());
        if (this.personne.getPermis() == 1) {
            jLabelPermis.setText("Titulaire du Permis B");
        } else {
            jLabelPermis.setText("Non Titulaire du Permis B");
        }
    }//GEN-LAST:event_jButtonPermisActionPerformed

    private void jMenuModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuModifActionPerformed
        this.jPanelFormation.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelModif.setOpaque(false);
        this.jPanelModif.setVisible(true);
        String cadre = "";
        DefaultTableModel leModel = (DefaultTableModel) jTablePosition.getModel();
        if(leModel.getRowCount() > 0){
            for(int i = 0; i <= leModel.getRowCount(); i++){
                if(i>=1){
                    leModel.removeRow(i-1);
                }else{
                    leModel.removeRow(i);
                }
            }
        }
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select * from utilisateurs where position = 0");
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();

                for (int i = 1; i <= longueur; i++) {
                    if (lignesRetournees.getInt("cadre") == 0) {
                        cadre = "Non Cadre";
                    } else if (lignesRetournees.getInt("cadre") == 1) {
                        cadre = "Cadre";
                    }
                    leModel.addRow(new Object[]{lignesRetournees.getInt("id_utilisateur"),lignesRetournees.getString("nom"), lignesRetournees.getString("prenom"), cadre});
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuModifActionPerformed

    private void jTablePositionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePositionMouseClicked
        String positionStr = String.valueOf(jTablePosition.getModel().getValueAt(jTablePosition.getSelectedRow(), 3));
        System.out.println(positionStr);
        String id = String.valueOf(jTablePosition.getModel().getValueAt(jTablePosition.getSelectedRow(), 0));
        System.out.println(id);
        String changeValue = "";
        Integer cadre = 0;
        if(positionStr == "Cadre"){
            changeValue = "Non Cadre";
            cadre = 0;
        }else if(positionStr == "Non Cadre"){
            changeValue = "Cadre";
            cadre = 1;
        }
        jTablePosition.getModel().setValueAt(changeValue, jTablePosition.getSelectedRow(), 3);
        Singleton.requeteAction("update utilisateurs set cadre = "+cadre+" where id_utilisateur = "+id);
    }//GEN-LAST:event_jTablePositionMouseClicked

    private void jButtonRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetActionPerformed
        this.jPanelModif.setVisible(false);
    }//GEN-LAST:event_jButtonRetActionPerformed

    private void jButtonAjoutEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjoutEmailActionPerformed
        String ajout = this.jTextFieldAjoutEmail.getText();
        DefaultListModel Select = (DefaultListModel) jListmail.getModel();
        Select.clear();
        try {
            Singleton.requeteAction("insert into cv_email (id_utilisateur, libelle_email) VALUES(" + personne.getId() + ",'" + ajout + "');");
            ResultSet lignesRetournees = Singleton.requeteSelection("select libelle_email from cv_email where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString("libelle_email"));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.jTextFieldAjoutEmail.setText("");
    }//GEN-LAST:event_jButtonAjoutEmailActionPerformed

    private void jButtonSuppEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSuppEmailActionPerformed
        String texte = jListmail.getSelectedValue();
        DefaultListModel Select = (DefaultListModel) jListmail.getModel();
        Select.clear();
        try {
            Singleton.requeteAction("delete from cv_email where id_utilisateur = " + this.personne.getId() + " and libelle_email = '" + texte + "'");
            ResultSet lignesRetournees = Singleton.requeteSelection("select libelle_email from cv_email where id_utilisateur = " + this.personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString("libelle_email"));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSuppEmailActionPerformed

    private void jMenuPromouvoirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPromouvoirActionPerformed
        this.jPanelFormation.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelPromouv.setVisible(true);
        this.jPanelPromouv.setOpaque(false);
        String position = "";
        DefaultTableModel leModel = (DefaultTableModel) jTablePromouv.getModel();
        if(leModel.getRowCount() > 0){
            for(int i = 0; i <= leModel.getRowCount(); i++){
                if(i>=1){
                    leModel.removeRow(i-1);
                }else{
                    leModel.removeRow(i);
                }
            }
        }
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select * from utilisateurs where position = 0 or position = 1");
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();

                for (int i = 1; i <= longueur; i++) {
                    if (lignesRetournees.getInt("position") == 0) {
                        position = "Employé";
                    } else if (lignesRetournees.getInt("position") == 1) {
                        position = "Responsable";
                    }
                    leModel.addRow(new Object[]{lignesRetournees.getInt("id_utilisateur"),lignesRetournees.getString("nom"), lignesRetournees.getString("prenom"), position});
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuPromouvoirActionPerformed

    private void jTablePromouvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePromouvMouseClicked
        String positionStr = String.valueOf(jTablePromouv.getModel().getValueAt(jTablePromouv.getSelectedRow(), 3));
        System.out.println(positionStr);
        String id = String.valueOf(jTablePromouv.getModel().getValueAt(jTablePromouv.getSelectedRow(), 0));
        System.out.println(id);
        String changeValue = "";
        Integer position = 0;
        if(positionStr == "Responsable"){
            changeValue = "Employé";
        }else if(positionStr == "Employé"){
            changeValue = "Responsable";
            position = 1;
        }
        jTablePromouv.getModel().setValueAt(changeValue, jTablePromouv.getSelectedRow(), 3);
        Singleton.requeteAction("update utilisateurs set position = "+position+" where id_utilisateur = "+id);
    }//GEN-LAST:event_jTablePromouvMouseClicked

    public void connecte(String leNom, String laPosition) {
        //maj de l'etat de la connexion
        this.connecte = true;
        //ajout du nom dans la fenetre
        this.nomjMenu.setText("Connecté en tant que : " + leNom + ", Position : " + laPosition);
        this.nomjMenu.setEnabled(false);
        //On fait apparaître les bouttons que tout le monde peut voir, peu importe la position
        this.jMenuCV.setVisible(true);
        this.MenuInformation.setVisible(true);
        if (laPosition.equals("Responsable")) {
            this.jMenuAction.setVisible(true);
            this.jMenuCreer.setVisible(false);
            this.jMenuPromouvoir.setVisible(false);
        } else if (laPosition.equals("Directeur")) {
            this.jMenuAction.setVisible(true);
            this.jMenuModif.setVisible(false);

        }
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select * from utilisateurs where nom='" + leNom + "'");
            if (lignesRetournees.next()) {
                this.personne = new Personne(lignesRetournees.getInt("id_utilisateur"), lignesRetournees.getString("nom"), lignesRetournees.getString("prenom"), lignesRetournees.getString("adresse_rue"), lignesRetournees.getString("adresse_cp"), lignesRetournees.getString("adresse_ville"), lignesRetournees.getFloat("salaire"), lignesRetournees.getString("tel_personnel"), lignesRetournees.getString("tel_professionnel"), lignesRetournees.getString("site_web"), laPosition, lignesRetournees.getInt("permis"), lignesRetournees.getInt("cadre"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void deconnecte() {
        this.connecte = false;
        this.nomjMenu.setText(null);
        this.jMenuCV.setVisible(false);
        this.MenuInformation.setVisible(false);
        this.jMenuAction.setVisible(false);
        this.jPanelFormation.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
        this.jPanelModif.setVisible(false);
    }

    public void majConnexion() {
        deconnexionMenuItem.setEnabled(this.connecte);
        connexionMenuItem.setEnabled(!this.connecte);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceGraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceGraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceGraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceGraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceGraphique().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuGenererCV;
    private javax.swing.JMenu MenuInformation;
    private javax.swing.JMenuItem SortieMenuItem;
    private javax.swing.JMenu aideMenu;
    private javax.swing.JMenuItem aproposMenuItem;
    private javax.swing.JMenuItem connexionMenuItem;
    private javax.swing.JMenuItem deconnexionMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButReturn;
    private javax.swing.JButton jButtonAjout;
    private javax.swing.JButton jButtonAjoutEmail;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonPermis;
    private javax.swing.JButton jButtonRet;
    private javax.swing.JButton jButtonRetour;
    private javax.swing.JButton jButtonReturn;
    private javax.swing.JButton jButtonSuppEmail;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonValider;
    private javax.swing.JComboBox<String> jComboBoxInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelPermis;
    private javax.swing.JLabel jLabelPosition;
    private javax.swing.JList<String> jListeForm;
    private javax.swing.JList<String> jListmail;
    private javax.swing.JMenu jMenuAction;
    private javax.swing.JMenu jMenuCV;
    private javax.swing.JMenuItem jMenuCreer;
    private javax.swing.JMenuItem jMenuFormations;
    private javax.swing.JMenuItem jMenuInfoPerso;
    private javax.swing.JMenuItem jMenuModif;
    private javax.swing.JMenuItem jMenuPromouvoir;
    private javax.swing.JPanel jPanelFormation;
    private javax.swing.JPanel jPanelInfoPerso;
    private javax.swing.JPanel jPanelModif;
    private javax.swing.JPanel jPanelPromouv;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTablePosition;
    private javax.swing.JTable jTablePromouv;
    private javax.swing.JTextField jTextFieldAdresse;
    private javax.swing.JTextField jTextFieldAjout;
    private javax.swing.JTextField jTextFieldAjoutEmail;
    private javax.swing.JTextField jTextFieldCP;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldPrenom;
    private javax.swing.JTextField jTextFieldSite;
    private javax.swing.JTextField jTextFieldTelPerso;
    private javax.swing.JTextField jTextFieldTelPro;
    private javax.swing.JTextField jTextFieldVille;
    private javax.swing.JLabel labelAdresse;
    private javax.swing.JLabel labelMail;
    private javax.swing.JLabel labelNom;
    private javax.swing.JLabel labelPosition;
    private javax.swing.JLabel labelPrenom;
    private javax.swing.JLabel labelSalaire;
    private javax.swing.JLabel labelTelPerso;
    private javax.swing.JLabel labelTelPro;
    private javax.swing.JLabel labelWeb;
    private javax.swing.JLabel labelduSalaire;
    private javax.swing.JMenuBar nomMenuBar;
    private javax.swing.JMenu nomjMenu;
    // End of variables declaration//GEN-END:variables
}
