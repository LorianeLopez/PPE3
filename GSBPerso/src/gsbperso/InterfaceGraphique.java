/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gsbperso;

import com.mysql.jdbc.Connection;
import static gsbperso.CV.DEST;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.sql.Array;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nc
 */
public class InterfaceGraphique extends javax.swing.JFrame {

    /**
     * attribut qui indique si l'etudiant est connecté ou non
     */
    private boolean connecte;
    public Personne personne;
    JFileChooser choixPhoto = null;
    ImageIcon lImage = null;

    /**
     * interface graphique
     */
    private Connexion fenConnexion;
    private Deconnexion fenDeconnexion;

    /**
     * constructeur : Creates new form InterfaceGraphique
     *
     */
    public InterfaceGraphique() {
        initComponents();
        //par defaut, la connexion est inactive
        this.connecte = false;
        //element du menu de deconnexion grisé
        this.majConnexion();
        //centrage
        this.setLocationRelativeTo(null);
        //titre 
        this.setTitle("Gestion du Personnel");
        //On fait en sorte de ne pas voir les boutons si l'on est pas connecté.
        this.jMenuCV.setVisible(false);
        this.MenuInformation.setVisible(false);
        this.jMenuAction.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelFormation.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelPromouv.setVisible(false);
        this.jPanelCreation.setVisible(false);
        this.jPanelImage.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jPanelFormation = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListeForm = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxInfo = new javax.swing.JComboBox<>();
        jTextFieldAjout = new javax.swing.JTextField();
        jButtonAjout = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonReturn = new javax.swing.JButton();
        jLabelPermis = new javax.swing.JLabel();
        jButtonPermis = new javax.swing.JButton();
        jPanelImage = new javax.swing.JPanel();
        jLabelTitre = new javax.swing.JLabel();
        jButtonChoixIimage = new javax.swing.JButton();
        jLabelPhoto = new javax.swing.JLabel();
        jButtonGenerationCV = new javax.swing.JButton();
        ButtonRetour = new javax.swing.JButton();
        jPanelInfoPerso = new javax.swing.JPanel();
        labelMail = new javax.swing.JLabel();
        labelSalaire = new javax.swing.JLabel();
        labelPosition = new javax.swing.JLabel();
        labelWeb = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jTextFieldPrenom = new javax.swing.JTextField();
        jTextFieldAdresse = new javax.swing.JTextField();
        jTextFieldTelPerso = new javax.swing.JTextField();
        jTextFieldTelPro = new javax.swing.JTextField();
        jTextFieldSite = new javax.swing.JTextField();
        labelduSalaire = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldCP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelNom = new javax.swing.JLabel();
        labelPrenom = new javax.swing.JLabel();
        jTextFieldVille = new javax.swing.JTextField();
        jButtonValider = new javax.swing.JButton();
        labelAdresse = new javax.swing.JLabel();
        jButtonAnnuler = new javax.swing.JButton();
        labelTelPerso = new javax.swing.JLabel();
        labelTelPro = new javax.swing.JLabel();
        jButtonRetour = new javax.swing.JButton();
        jLabelPosition = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListmail = new javax.swing.JList<>();
        jButtonAjoutEmail = new javax.swing.JButton();
        jTextFieldAjoutEmail = new javax.swing.JTextField();
        jButtonSuppEmail = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanelModif = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePosition = new javax.swing.JTable();
        jButtonRet = new javax.swing.JButton();
        jPanelCreation = new javax.swing.JPanel();
        jButtonValiderCreation = new javax.swing.JButton();
        labelAdresse1 = new javax.swing.JLabel();
        jButtonAnnulerRemplissage = new javax.swing.JButton();
        labelTelPerso1 = new javax.swing.JLabel();
        labelTelPro1 = new javax.swing.JLabel();
        jButtonRetour1 = new javax.swing.JButton();
        jTextFieldAdresse1 = new javax.swing.JTextField();
        jTextFieldAjoutEmail1 = new javax.swing.JTextField();
        jTextFieldTelPerso1 = new javax.swing.JTextField();
        jTextFieldTelPro1 = new javax.swing.JTextField();
        jTextFieldSite1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldCP1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        labelNom1 = new javax.swing.JLabel();
        labelMail1 = new javax.swing.JLabel();
        labelWeb1 = new javax.swing.JLabel();
        jTextFieldNom1 = new javax.swing.JTextField();
        jTextFieldPrenom1 = new javax.swing.JTextField();
        labelPrenom1 = new javax.swing.JLabel();
        jTextFieldVille1 = new javax.swing.JTextField();
        jRadioButtonYes = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldUser = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldMDP = new javax.swing.JTextField();
        jPanelPromouv = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablePromouv = new javax.swing.JTable();
        jButReturn = new javax.swing.JButton();
        nomMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        connexionMenuItem = new javax.swing.JMenuItem();
        deconnexionMenuItem = new javax.swing.JMenuItem();
        SortieMenuItem = new javax.swing.JMenuItem();
        jMenuCV = new javax.swing.JMenu();
        MenuGenererCV = new javax.swing.JMenuItem();
        MenuInformation = new javax.swing.JMenu();
        jMenuInfoPerso = new javax.swing.JMenuItem();
        jMenuFormations = new javax.swing.JMenuItem();
        jMenuAction = new javax.swing.JMenu();
        jMenuModif = new javax.swing.JMenuItem();
        jMenuCreer = new javax.swing.JMenuItem();
        jMenuPromouvoir = new javax.swing.JMenuItem();
        nomjMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktopPane.setBorder(new javax.swing.border.MatteBorder(null));

        jPanelFormation.setBackground(new java.awt.Color(204, 204, 204));

        jListeForm.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(jListeForm);

        jLabel5.setFont(new java.awt.Font("Sitka Text", 3, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 153, 153));
        jLabel5.setText("Formations, Stages, Langues, Permis, Hobbies");

        jComboBoxInfo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Formations", "Stages", "Langues", "Hobbies", "Expériences", "Compétences" }));
        jComboBoxInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxInfoActionPerformed(evt);
            }
        });

        jButtonAjout.setText("Ajouter");
        jButtonAjout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjoutActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonReturn.setText("Retour");
        jButtonReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReturnActionPerformed(evt);
            }
        });

        jLabelPermis.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jLabelPermis.setForeground(new java.awt.Color(153, 153, 153));
        jLabelPermis.setText("Permis");

        jButtonPermis.setText("Changer le statut du Permis");
        jButtonPermis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPermisActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelFormationLayout = new org.jdesktop.layout.GroupLayout(jPanelFormation);
        jPanelFormation.setLayout(jPanelFormationLayout);
        jPanelFormationLayout.setHorizontalGroup(
            jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelFormationLayout.createSequentialGroup()
                .add(36, 36, 36)
                .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanelFormationLayout.createSequentialGroup()
                        .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelFormationLayout.createSequentialGroup()
                                .add(126, 126, 126)
                                .add(jLabel5))
                            .add(jPanelFormationLayout.createSequentialGroup()
                                .add(288, 288, 288)
                                .add(jButtonAjout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(43, 43, 43)
                                .add(jButtonSupprimer)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFormationLayout.createSequentialGroup()
                        .add(jButtonReturn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(197, 197, 197))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFormationLayout.createSequentialGroup()
                        .add(jComboBoxInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(jTextFieldAjout)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 431, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFormationLayout.createSequentialGroup()
                        .add(jLabelPermis, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 224, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(410, 410, 410)))
                .addContainerGap(100, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFormationLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButtonPermis)
                .add(280, 280, 280))
        );
        jPanelFormationLayout.setVerticalGroup(
            jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelFormationLayout.createSequentialGroup()
                .add(29, 29, 29)
                .add(jLabel5)
                .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelFormationLayout.createSequentialGroup()
                        .add(71, 71, 71)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 172, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanelFormationLayout.createSequentialGroup()
                        .add(155, 155, 155)
                        .add(jComboBoxInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(59, 59, 59)
                .add(jTextFieldAjout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(64, 64, 64)
                .add(jPanelFormationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonAjout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonSupprimer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jButtonReturn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabelPermis)
                .add(29, 29, 29)
                .add(jButtonPermis)
                .add(863, 863, 863))
        );

        desktopPane.add(jPanelFormation);
        jPanelFormation.setBounds(0, 0, 770, 760);

        jLabelTitre.setFont(new java.awt.Font("Sylfaen", 3, 24)); // NOI18N
        jLabelTitre.setForeground(new java.awt.Color(153, 153, 153));
        jLabelTitre.setText("Choisir une image");

        jButtonChoixIimage.setText("Choisir Photo");
        jButtonChoixIimage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChoixIimageActionPerformed(evt);
            }
        });

        jButtonGenerationCV.setText("Générer le CV");
        jButtonGenerationCV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerationCVActionPerformed(evt);
            }
        });

        ButtonRetour.setText("Retour");
        ButtonRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRetourActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelImageLayout = new org.jdesktop.layout.GroupLayout(jPanelImage);
        jPanelImage.setLayout(jPanelImageLayout);
        jPanelImageLayout.setHorizontalGroup(
            jPanelImageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelImageLayout.createSequentialGroup()
                .add(0, 129, Short.MAX_VALUE)
                .add(jLabelPhoto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 536, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(105, 105, 105))
            .add(jPanelImageLayout.createSequentialGroup()
                .add(jPanelImageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelImageLayout.createSequentialGroup()
                        .add(268, 268, 268)
                        .add(jLabelTitre, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 224, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanelImageLayout.createSequentialGroup()
                        .add(212, 212, 212)
                        .add(jButtonChoixIimage)
                        .add(133, 133, 133)
                        .add(jButtonGenerationCV))
                    .add(jPanelImageLayout.createSequentialGroup()
                        .add(345, 345, 345)
                        .add(ButtonRetour)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelImageLayout.setVerticalGroup(
            jPanelImageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelImageLayout.createSequentialGroup()
                .add(35, 35, 35)
                .add(jLabelTitre)
                .add(39, 39, 39)
                .add(jLabelPhoto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 573, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(34, 34, 34)
                .add(jPanelImageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonChoixIimage)
                    .add(jButtonGenerationCV))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(ButtonRetour)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        desktopPane.add(jPanelImage);
        jPanelImage.setBounds(0, 0, 770, 790);

        jPanelInfoPerso.setBackground(new java.awt.Color(204, 204, 204));

        labelMail.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelMail.setForeground(new java.awt.Color(153, 153, 153));
        labelMail.setText("Email");

        labelSalaire.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelSalaire.setForeground(new java.awt.Color(153, 153, 153));
        labelSalaire.setText("Salaire");

        labelPosition.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelPosition.setForeground(new java.awt.Color(153, 153, 153));
        labelPosition.setText("Position");

        labelWeb.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelWeb.setForeground(new java.awt.Color(153, 153, 153));
        labelWeb.setText("Site Web");

        jTextFieldTelPerso.setToolTipText("Format Français, sans espace");

        jTextFieldTelPro.setToolTipText("Format Français, sans espace");

        labelduSalaire.setForeground(new java.awt.Color(204, 204, 204));
        labelduSalaire.setText(" ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setText("Code Postal");

        jTextFieldCP.setToolTipText("Format Français");

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("Vos Informations Personnelles");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        jLabel3.setText("Ville");

        labelNom.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelNom.setForeground(new java.awt.Color(153, 153, 153));
        labelNom.setText("Nom");

        labelPrenom.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelPrenom.setForeground(new java.awt.Color(153, 153, 153));
        labelPrenom.setText("Prénom");

        jButtonValider.setText("Valider");
        jButtonValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValiderActionPerformed(evt);
            }
        });

        labelAdresse.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelAdresse.setForeground(new java.awt.Color(153, 153, 153));
        labelAdresse.setText("Adresse");

        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        labelTelPerso.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelTelPerso.setForeground(new java.awt.Color(153, 153, 153));
        labelTelPerso.setText("Téléphone Personnel");

        labelTelPro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelTelPro.setForeground(new java.awt.Color(153, 153, 153));
        labelTelPro.setText("Téléphone Professionnel");

        jButtonRetour.setText("Retour");
        jButtonRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetourActionPerformed(evt);
            }
        });

        jLabelPosition.setForeground(new java.awt.Color(204, 204, 204));

        jListmail.setModel(new DefaultListModel());
        jScrollPane3.setViewportView(jListmail);

        jButtonAjoutEmail.setText("Ajouter");
        jButtonAjoutEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjoutEmailActionPerformed(evt);
            }
        });

        jButtonSuppEmail.setText("Supprimer");
        jButtonSuppEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSuppEmailActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelInfoPersoLayout = new org.jdesktop.layout.GroupLayout(jPanelInfoPerso);
        jPanelInfoPerso.setLayout(jPanelInfoPersoLayout);
        jPanelInfoPersoLayout.setHorizontalGroup(
            jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelInfoPersoLayout.createSequentialGroup()
                .add(0, 206, Short.MAX_VALUE)
                .add(jLabel1)
                .add(199, 199, 199))
            .add(jPanelInfoPersoLayout.createSequentialGroup()
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanelInfoPersoLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelInfoPersoLayout.createSequentialGroup()
                        .add(318, 318, 318)
                        .add(jButtonAjoutEmail)
                        .add(58, 58, 58)
                        .add(jButtonSuppEmail)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelInfoPersoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelInfoPersoLayout.createSequentialGroup()
                        .add(106, 106, 106)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(labelSalaire)
                            .add(labelPosition))
                        .add(28, 28, 28)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(labelduSalaire, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabelPosition, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(jPanelInfoPersoLayout.createSequentialGroup()
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelInfoPersoLayout.createSequentialGroup()
                                .add(jButtonValider)
                                .add(51, 51, 51)
                                .add(jButtonAnnuler))
                            .add(jPanelInfoPersoLayout.createSequentialGroup()
                                .add(64, 64, 64)
                                .add(jButtonRetour)))
                        .add(160, 160, 160))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelInfoPersoLayout.createSequentialGroup()
                        .add(67, 67, 67)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(labelPrenom)
                            .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel2)
                                    .add(jLabel3))
                                .add(jPanelInfoPersoLayout.createSequentialGroup()
                                    .add(27, 27, 27)
                                    .add(labelAdresse)))
                            .add(labelNom))
                        .add(34, 34, 34)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldPrenom)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldAdresse)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldCP)
                            .add(jTextFieldVille)
                            .add(jTextFieldNom)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelInfoPersoLayout.createSequentialGroup()
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(labelTelPro)
                                .add(labelMail))
                            .add(jPanelInfoPersoLayout.createSequentialGroup()
                                .add(20, 20, 20)
                                .add(labelTelPerso))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, labelWeb))
                        .add(28, 28, 28)
                        .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextFieldSite)
                            .add(jScrollPane3)
                            .add(jTextFieldTelPerso)
                            .add(jTextFieldTelPro)
                            .add(jTextFieldAjoutEmail))))
                .add(146, 146, 146))
        );
        jPanelInfoPersoLayout.setVerticalGroup(
            jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelInfoPersoLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jLabel1)
                .add(60, 60, 60)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelNom)
                    .add(jTextFieldNom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(20, 20, 20)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldPrenom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelPrenom))
                .add(47, 47, 47)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldAdresse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelAdresse))
                .add(18, 18, 18)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldCP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .add(18, 18, 18)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jTextFieldVille, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(43, 43, 43)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jTextFieldTelPerso, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelTelPerso))
                .add(19, 19, 19)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldTelPro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelTelPro))
                .add(21, 21, 21)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelMail)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jTextFieldAjoutEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonAjoutEmail)
                    .add(jButtonSuppEmail))
                .add(18, 18, 18)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldSite, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelWeb))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelduSalaire)
                    .add(labelSalaire))
                .add(18, 18, 18)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelPosition)
                    .add(jLabelPosition, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanelInfoPersoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonValider)
                    .add(jButtonAnnuler))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonRetour)
                .add(66, 66, 66))
        );

        desktopPane.add(jPanelInfoPerso);
        jPanelInfoPerso.setBounds(0, 0, 770, 810);

        jLabel6.setFont(new java.awt.Font("Sylfaen", 3, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 153, 153));
        jLabel6.setText("Modifier la position d'un employé");

        jTablePosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom", "Prenom", "Position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePosition.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePositionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTablePosition);
        if (jTablePosition.getColumnModel().getColumnCount() > 0) {
            jTablePosition.getColumnModel().getColumn(0).setResizable(false);
        }

        jButtonRet.setText("Retour");
        jButtonRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelModifLayout = new org.jdesktop.layout.GroupLayout(jPanelModif);
        jPanelModif.setLayout(jPanelModifLayout);
        jPanelModifLayout.setHorizontalGroup(
            jPanelModifLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelModifLayout.createSequentialGroup()
                .addContainerGap(117, Short.MAX_VALUE)
                .add(jPanelModifLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelModifLayout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 524, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(38, 38, 38))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelModifLayout.createSequentialGroup()
                        .add(jButtonRet)
                        .add(276, 276, 276))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelModifLayout.createSequentialGroup()
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 382, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(120, 120, 120))))
        );
        jPanelModifLayout.setVerticalGroup(
            jPanelModifLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelModifLayout.createSequentialGroup()
                .add(31, 31, 31)
                .add(jLabel6)
                .add(18, 18, 18)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 476, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 45, Short.MAX_VALUE)
                .add(jButtonRet)
                .add(41, 41, 41))
        );

        desktopPane.add(jPanelModif);
        jPanelModif.setBounds(0, 0, 679, 669);

        jButtonValiderCreation.setText("Valider");
        jButtonValiderCreation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValiderCreationActionPerformed(evt);
            }
        });

        labelAdresse1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelAdresse1.setForeground(new java.awt.Color(153, 153, 153));
        labelAdresse1.setText("Adresse");

        jButtonAnnulerRemplissage.setText("Annuler");
        jButtonAnnulerRemplissage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerRemplissageActionPerformed(evt);
            }
        });

        labelTelPerso1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelTelPerso1.setForeground(new java.awt.Color(153, 153, 153));
        labelTelPerso1.setText("Téléphone Personnel");

        labelTelPro1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelTelPro1.setForeground(new java.awt.Color(153, 153, 153));
        labelTelPro1.setText("Téléphone Professionnel");

        jButtonRetour1.setText("Retour");
        jButtonRetour1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetour1ActionPerformed(evt);
            }
        });

        jTextFieldTelPerso1.setToolTipText("Format Français, sans espace");

        jTextFieldTelPro1.setToolTipText("Format Français, sans espace");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("Code Postal");

        jTextFieldCP1.setToolTipText("Format Français");

        jLabel9.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 153, 153));
        jLabel9.setText("Création d'un nouvel employé");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 153, 153));
        jLabel10.setText("Ville");

        labelNom1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelNom1.setForeground(new java.awt.Color(153, 153, 153));
        labelNom1.setText("Nom");

        labelMail1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelMail1.setForeground(new java.awt.Color(153, 153, 153));
        labelMail1.setText("Email");

        labelWeb1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelWeb1.setForeground(new java.awt.Color(153, 153, 153));
        labelWeb1.setText("Site Web");

        labelPrenom1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelPrenom1.setForeground(new java.awt.Color(153, 153, 153));
        labelPrenom1.setText("Prénom");

        jRadioButtonYes.setText("Permis A");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 153, 153));
        jLabel11.setText("Utilisateur");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 153, 153));
        jLabel12.setText("Mot de Passe");

        org.jdesktop.layout.GroupLayout jPanelCreationLayout = new org.jdesktop.layout.GroupLayout(jPanelCreation);
        jPanelCreation.setLayout(jPanelCreationLayout);
        jPanelCreationLayout.setHorizontalGroup(
            jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelCreationLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelCreationLayout.createSequentialGroup()
                        .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(labelTelPro1)
                                .add(labelMail1)
                                .add(jLabel11)
                                .add(jLabel12))
                            .add(jPanelCreationLayout.createSequentialGroup()
                                .add(20, 20, 20)
                                .add(labelTelPerso1))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, labelWeb1))
                        .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelCreationLayout.createSequentialGroup()
                                .add(28, 28, 28)
                                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jTextFieldTelPerso1)
                                    .add(jTextFieldTelPro1)
                                    .add(jTextFieldAjoutEmail1)))
                            .add(jPanelCreationLayout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jTextFieldUser)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldSite1)
                                    .add(jTextFieldMDP)))))
                    .add(jPanelCreationLayout.createSequentialGroup()
                        .add(67, 67, 67)
                        .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(labelPrenom1)
                            .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel8)
                                    .add(jLabel10))
                                .add(jPanelCreationLayout.createSequentialGroup()
                                    .add(27, 27, 27)
                                    .add(labelAdresse1)))
                            .add(labelNom1))
                        .add(34, 34, 34)
                        .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelCreationLayout.createSequentialGroup()
                                .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 373, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 102, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldPrenom1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldAdresse1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldCP1)
                            .add(jTextFieldVille1)
                            .add(jTextFieldNom1))))
                .add(51, 51, 51))
            .add(jPanelCreationLayout.createSequentialGroup()
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelCreationLayout.createSequentialGroup()
                        .add(139, 139, 139)
                        .add(jRadioButtonYes))
                    .add(jPanelCreationLayout.createSequentialGroup()
                        .add(201, 201, 201)
                        .add(jButtonValiderCreation)
                        .add(103, 103, 103)
                        .add(jButtonAnnulerRemplissage))
                    .add(jPanelCreationLayout.createSequentialGroup()
                        .add(290, 290, 290)
                        .add(jButtonRetour1)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelCreationLayout.setVerticalGroup(
            jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelCreationLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel9)
                .add(60, 60, 60)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelNom1)
                    .add(jTextFieldNom1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(20, 20, 20)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldPrenom1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelPrenom1))
                .add(47, 47, 47)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldAdresse1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelAdresse1))
                .add(18, 18, 18)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldCP1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8))
                .add(18, 18, 18)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(jTextFieldVille1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(43, 43, 43)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jTextFieldTelPerso1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelTelPerso1))
                .add(19, 19, 19)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldTelPro1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelTelPro1))
                .add(18, 18, 18)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelMail1)
                    .add(jTextFieldAjoutEmail1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(45, 45, 45)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelWeb1)
                    .add(jTextFieldSite1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel11)
                    .add(jTextFieldUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel12)
                    .add(jTextFieldMDP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jRadioButtonYes)
                .add(18, 18, 18)
                .add(jPanelCreationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonValiderCreation)
                    .add(jButtonAnnulerRemplissage))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButtonRetour1)
                .add(115, 115, 115))
        );

        desktopPane.add(jPanelCreation);
        jPanelCreation.setBounds(0, 0, 720, 847);

        jLabel7.setFont(new java.awt.Font("Sylfaen", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 153, 153));
        jLabel7.setText("Promouvoir ou Retrograder un Employé");

        jTablePromouv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom", "Prenom", "Position"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePromouv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePromouvMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTablePromouv);
        if (jTablePromouv.getColumnModel().getColumnCount() > 0) {
            jTablePromouv.getColumnModel().getColumn(0).setResizable(false);
            jTablePromouv.getColumnModel().getColumn(1).setResizable(false);
            jTablePromouv.getColumnModel().getColumn(2).setResizable(false);
            jTablePromouv.getColumnModel().getColumn(3).setResizable(false);
        }

        jButReturn.setText("Retour");

        org.jdesktop.layout.GroupLayout jPanelPromouvLayout = new org.jdesktop.layout.GroupLayout(jPanelPromouv);
        jPanelPromouv.setLayout(jPanelPromouvLayout);
        jPanelPromouvLayout.setHorizontalGroup(
            jPanelPromouvLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelPromouvLayout.createSequentialGroup()
                .add(329, 329, 329)
                .add(jButReturn)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelPromouvLayout.createSequentialGroup()
                .addContainerGap(171, Short.MAX_VALUE)
                .add(jPanelPromouvLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelPromouvLayout.createSequentialGroup()
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(147, 147, 147))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelPromouvLayout.createSequentialGroup()
                        .add(jLabel7)
                        .add(176, 176, 176))))
        );
        jPanelPromouvLayout.setVerticalGroup(
            jPanelPromouvLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelPromouvLayout.createSequentialGroup()
                .add(47, 47, 47)
                .add(jLabel7)
                .add(30, 30, 30)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(65, 65, 65)
                .add(jButReturn)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        desktopPane.add(jPanelPromouv);
        jPanelPromouv.setBounds(0, 0, 770, 810);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Personnel");

        connexionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        connexionMenuItem.setMnemonic('o');
        connexionMenuItem.setText("Connexion");
        connexionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connexionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(connexionMenuItem);

        deconnexionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        deconnexionMenuItem.setMnemonic('s');
        deconnexionMenuItem.setText("Déconnexion");
        deconnexionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnexionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(deconnexionMenuItem);

        SortieMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SortieMenuItem.setMnemonic('x');
        SortieMenuItem.setText("Sortie");
        SortieMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortieMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(SortieMenuItem);

        nomMenuBar.add(fileMenu);

        jMenuCV.setText("CV");

        MenuGenererCV.setText("Générer au format PDF");
        MenuGenererCV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGenererCVActionPerformed(evt);
            }
        });
        jMenuCV.add(MenuGenererCV);

        nomMenuBar.add(jMenuCV);

        MenuInformation.setText("Informations");

        jMenuInfoPerso.setText("Informations Personnelles");
        jMenuInfoPerso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuInfoPersoActionPerformed(evt);
            }
        });
        MenuInformation.add(jMenuInfoPerso);

        jMenuFormations.setText("Formations/Stages/Langues etc...");
        jMenuFormations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFormationsActionPerformed(evt);
            }
        });
        MenuInformation.add(jMenuFormations);

        nomMenuBar.add(MenuInformation);

        jMenuAction.setText("Actions");

        jMenuModif.setText("Modifier la position");
        jMenuModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuModifActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuModif);

        jMenuCreer.setText("Créer un Employé");
        jMenuCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCreerActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuCreer);

        jMenuPromouvoir.setText("Promouvoir/Retrograder un Employé");
        jMenuPromouvoir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPromouvoirActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuPromouvoir);

        nomMenuBar.add(jMenuAction);
        nomMenuBar.add(nomjMenu);

        setJMenuBar(nomMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(desktopPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(desktopPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Permet de fermer l'application
     * @param evt 
     */
    private void SortieMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortieMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_SortieMenuItemActionPerformed
    
    /**
     * Ouvre la fenêtre de connexion
     * @param evt 
     */
    private void connexionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connexionMenuItemActionPerformed
        // TODO add your handling code here:

        /**
         * création de la fenetre de connexion et attachement de cette dernière
         * à l'interface maj de connecte en retour
         */
        this.fenConnexion = new Connexion(this, true);
        this.fenConnexion.setVisible(true);
    }//GEN-LAST:event_connexionMenuItemActionPerformed
    
    /**
     * Ouvre la fenêtre de deconnexion
     * @param evt 
     */
    private void deconnexionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deconnexionMenuItemActionPerformed
        // TODO add your handling code here:
        fenDeconnexion = new Deconnexion(this, true);
        this.fenDeconnexion.setVisible(true);
    }//GEN-LAST:event_deconnexionMenuItemActionPerformed
    
    /**
     * Cache les autres fenêtres possiblement ouvertes, affiche le panel d'informations et met à jour les informations de l'employé
     * @param evt 
     */
    private void jMenuInfoPersoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuInfoPersoActionPerformed
        this.jPanelInfoPerso.setVisible(true);
        this.jPanelFormation.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelCreation.setVisible(false);
        this.jPanelImage.setVisible(false);
        this.jPanelImage.setVisible(false);
        this.jPanelInfoPerso.setOpaque(false);
        this.jTextFieldNom.setText(this.personne.getNom());
        this.jTextFieldPrenom.setText(this.personne.getPrenom());
        this.jTextFieldAdresse.setText(this.personne.getAdresse_rue());
        this.jTextFieldCP.setText(this.personne.getAdresse_CP());
        this.jTextFieldVille.setText(this.personne.getAdresse_ville());
        this.jTextFieldTelPerso.setText(this.personne.getTelPerso());
        this.jTextFieldTelPro.setText(this.personne.getTelPro());
        this.jLabelPosition.setText(this.personne.getPosition());
        this.jTextFieldSite.setText(this.personne.getSite());
        this.labelduSalaire.setText(this.personne.getSalaire() + " euros");
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select libelle_email from cv_email where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                DefaultListModel Select = (DefaultListModel) jListmail.getModel();
                Select.clear();
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString("libelle_email"));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuInfoPersoActionPerformed
    
    /**
     * Permet de remettre les valeurs initiales si l'enregistrement dans la bdd n'a pas encore été fait.
     * @param evt 
     */
    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        this.jTextFieldNom.setText(this.personne.getNom());
        this.jTextFieldPrenom.setText(this.personne.getPrenom());
        this.jTextFieldAdresse.setText(this.personne.getAdresse_rue());
        this.jTextFieldCP.setText(this.personne.getAdresse_CP());
        this.jTextFieldVille.setText(this.personne.getAdresse_ville());
        this.jTextFieldTelPerso.setText(this.personne.getTelPerso());
        this.jTextFieldTelPro.setText(this.personne.getTelPro());
        this.jLabelPosition.setText(this.personne.getPosition());
        this.jTextFieldSite.setText(this.personne.getSite());
        this.labelduSalaire.setText(this.personne.getSalaire() + " euros");
    }//GEN-LAST:event_jButtonAnnulerActionPerformed
    
    /**
 * Permet de cacher le panel des informations personnelles
 * @param evt 
 */
    private void jButtonRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetourActionPerformed
        this.jPanelInfoPerso.setVisible(false);
    }//GEN-LAST:event_jButtonRetourActionPerformed
    
    /**
     * Valide les nouvelles données saisies et les enregistre dans la bdd
     * @param evt 
     */
    private void jButtonValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValiderActionPerformed
        try {
            String nom = this.jTextFieldNom.getText();
            String prenom = this.jTextFieldPrenom.getText();
            String adresse_rue = this.jTextFieldAdresse.getText();
            String adresse_cp = this.jTextFieldCP.getText();
            String adresse_ville = this.jTextFieldVille.getText();
            String tel_perso = this.jTextFieldTelPerso.getText();
            String tel_pro = this.jTextFieldTelPro.getText();
            String site = this.jTextFieldSite.getText();
            if (Outils.estUnEntier(nom) == false && nom.length() > 0 && Outils.estUnEntier(prenom) == false && prenom.length() > 0 && Outils.estUnEntier(adresse_rue) == false && adresse_rue.length() > 0 && Outils.estUnEntier(adresse_cp) && adresse_cp.length() > 0 && Outils.estUnEntier(adresse_ville) == false && adresse_ville.length() > 0 && Outils.estUnEntier(tel_perso) && Outils.estUnEntier(tel_pro) && Outils.estUnEntier(site) == false && site.length() > 0 && tel_perso.length() == 10 && tel_pro.length() == 10) {
                Singleton.requeteAction("update utilisateurs set nom='" + nom + "', prenom='" + prenom + "', adresse_rue='" + adresse_rue + "', adresse_cp='" + adresse_cp + "', adresse_ville='" + adresse_ville + "', tel_personnel='" + tel_perso + "', tel_professionnel='" + tel_pro + "', site_web='" + site + "' where id_utilisateur = " + this.personne.getId());
                JOptionPane.showMessageDialog(rootPane, "Informations modifiées.");
                this.personne.setNom(nom);
                this.personne.setPrenom(prenom);
                this.personne.setAdresse_rue(adresse_rue);
                this.personne.setAdresse_CP(adresse_cp);
                this.personne.setAdresse_ville(adresse_ville);
                this.personne.setTelPerso(tel_perso);
                this.personne.setTelPro(tel_pro);
                this.personne.setSite(site);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Un champ a mal été renseigné ou est vide.");
            }
        } catch (HeadlessException ex) {
            String erreur = ex.getMessage();
            System.out.println(erreur);
            if ("empty String".equals(erreur)) {
                JOptionPane.showMessageDialog(rootPane, "Veuillez remplir tous les champs.");
            }
        }
    }//GEN-LAST:event_jButtonValiderActionPerformed
    
    /**
     * Cache les fenêtres possiblement ouvertes, affiche le panel de Formations et affiche les données de formations de l'employé et l'aquisition ou non de son permis
     * @param evt 
     */
    private void jMenuFormationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFormationsActionPerformed
        this.jPanelFormation.setVisible(true);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelCreation.setVisible(false);
        this.jPanelImage.setVisible(false);
        this.jPanelPromouv.setVisible(false);
        this.jPanelFormation.setOpaque(false);
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select libelle_formation from cv_formation where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
                Select.clear();
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString("libelle_formation"));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (this.personne.getPermis() == 1) {
            jLabelPermis.setText("Titulaire du Permis B");
        } else {
            jLabelPermis.setText("Non Titulaire du Permis B");
        }
    }//GEN-LAST:event_jMenuFormationsActionPerformed
    
    /**
     * Permet de cacher le panel des formations et de vider la liste
     * @param evt 
     */
    private void jButtonReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReturnActionPerformed
        this.jPanelFormation.setVisible(false);
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
    }//GEN-LAST:event_jButtonReturnActionPerformed
    
    /**
     * Affiche selon la selection les formations, stages, langues, centres d'intéret, experiences professionnelles et compétences informatique de l'employé
     * @param evt 
     */
    private void jComboBoxInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxInfoActionPerformed
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
        try {
            String tuple = "";
            String libelle = "";
            int choix = jComboBoxInfo.getSelectedIndex();
            switch (choix) {
                case 0:
                    tuple = "cv_formation";
                    libelle = "libelle_formation";
                    break;
                case 1:
                    tuple = "cv_stages";
                    libelle = "libelle_stage";
                    break;
                case 2:
                    tuple = "cv_langue";
                    libelle = "libelle_langue";
                    break;
                case 3:
                    tuple = "cv_centre_interet";
                    libelle = "libelle_centre_interet";
                    break;
                case 4:
                    tuple = "cv_experience_prof";
                    libelle = "libelle_experience_prof";
                    break;
                case 5:
                    tuple = "cv_informatique";
                    libelle = "libelle_informatique";
                default:
                    break;
            }
            ResultSet lignesRetournees = Singleton.requeteSelection("select " + libelle + " from " + tuple + " where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString(libelle));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBoxInfoActionPerformed
    
    /**
     * Permet de supprimer dans la table correcte de la bdd l'information selectionnée
     * @param evt 
     */
    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        String texte = jListeForm.getSelectedValue();
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
        try {
            String tuple = "";
            String libelle = "";
            int choix = jComboBoxInfo.getSelectedIndex();
            switch (choix) {
                case 0:
                    tuple = "cv_formation";
                    libelle = "libelle_formation";
                    break;
                case 1:
                    tuple = "cv_stages";
                    libelle = "libelle_stage";
                    break;
                case 2:
                    tuple = "cv_langue";
                    libelle = "libelle_langue";
                    break;
                case 3:
                    tuple = "cv_centre_interet";
                    libelle = "libelle_centre_interet";
                    break;
                case 4:
                    tuple = "cv_experience_prof";
                    libelle = "libelle_experience_prof";
                    break;
                case 5:
                    tuple = "cv_informatique";
                    libelle = "libelle_informatique";
                default:
                    break;
            }
            Singleton.requeteAction("delete from " + tuple + " where id_utilisateur = " + this.personne.getId() + " and " + libelle + " = '" + texte + "'");
            ResultSet lignesRetournees = Singleton.requeteSelection("select " + libelle + " from " + tuple + " where id_utilisateur = " + this.personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString(libelle));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    /**
     * Permet d'ajouter dans la table correcte de la bdd l'information saisie
     * @param evt 
     */
    private void jButtonAjoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjoutActionPerformed
        String ajout = this.jTextFieldAjout.getText();
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
        try {
            String tuple = "";
            String libelle = "";
            int choix = jComboBoxInfo.getSelectedIndex();
            switch (choix) {
                case 0:
                    tuple = "cv_formation";
                    libelle = "libelle_formation";
                    break;
                case 1:
                    tuple = "cv_stages";
                    libelle = "libelle_stage";
                    break;
                case 2:
                    tuple = "cv_langue";
                    libelle = "libelle_langue";
                    break;
                case 3:
                    tuple = "cv_centre_interet";
                    libelle = "libelle_centre_interet";
                    break;
                case 4:
                    tuple = "cv_experience_prof";
                    libelle = "libelle_experience_prof";
                    break;
                case 5:
                    tuple = "cv_informatique";
                    libelle = "libelle_informatique";
                default:
                    break;
            }
            if (Outils.estUnEntier(ajout) == false && ajout.length() > 0) {
                Singleton.requeteAction("insert into " + tuple + " (id_utilisateur," + libelle + ") VALUES(" + personne.getId() + ",'" + ajout + "');");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Le champ a mal été renseigné ou est vide.");
            }
            ResultSet lignesRetournees = Singleton.requeteSelection("select " + libelle + " from " + tuple + " where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString(libelle));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.jTextFieldAjout.setText("");
    }//GEN-LAST:event_jButtonAjoutActionPerformed

    /**
     * Change la donnée du permis dans la bdd en intégrant son contraire.
     * @param evt 
     */
    private void jButtonPermisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPermisActionPerformed
        int permis;
        if (this.personne.getPermis() == 0) {
            permis = 1;
            this.personne.setPermis(1);
        } else {
            permis = 0;
            this.personne.setPermis(0);
        }
        Singleton.requeteAction("update utilisateurs set permis = " + permis + " where id_utilisateur = " + this.personne.getId());
        if (this.personne.getPermis() == 1) {
            jLabelPermis.setText("Titulaire du Permis B");
        } else {
            jLabelPermis.setText("Non Titulaire du Permis B");
        }
    }//GEN-LAST:event_jButtonPermisActionPerformed

    /**
     * Cache les autres fenêtres possiblement visible, affiche le panel de modification et affiche tous les utilisateurs en position "employé"
     * @param evt 
     */
    private void jMenuModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuModifActionPerformed
        this.jPanelFormation.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelModif.setVisible(true);
        this.jPanelCreation.setVisible(false);
        this.jPanelPromouv.setVisible(false);
        this.jPanelImage.setVisible(false);
        this.jPanelModif.setOpaque(false);

        String cadre = "";
        DefaultTableModel leModel = (DefaultTableModel) jTablePosition.getModel();
        if (leModel.getRowCount() > 0) {
            for (int i = 0; i <= leModel.getRowCount(); i++) {
                if (i >= 1) {
                    leModel.removeRow(i - 1);
                } else {
                    leModel.removeRow(i);
                }
            }
        }
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select * from utilisateurs where position = 0");
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();

                for (int i = 1; i <= longueur; i++) {
                    if (lignesRetournees.getInt("cadre") == 0) {
                        cadre = "Non Cadre";
                    } else if (lignesRetournees.getInt("cadre") == 1) {
                        cadre = "Cadre";
                    }
                    leModel.addRow(new Object[]{lignesRetournees.getInt("id_utilisateur"), lignesRetournees.getString("nom"), lignesRetournees.getString("prenom"), cadre});
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuModifActionPerformed

    /**
     * Récupère l'employé selectionné et modifie sa position, passant en cadre ou en non cadre dans la bdd
     * @param evt 
     */
    private void jTablePositionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePositionMouseClicked
        String positionStr = String.valueOf(jTablePosition.getModel().getValueAt(jTablePosition.getSelectedRow(), 3));
        System.out.println(positionStr);
        String id = String.valueOf(jTablePosition.getModel().getValueAt(jTablePosition.getSelectedRow(), 0));
        System.out.println(id);
        String changeValue = "";
        Integer cadre = 0;
        Integer salaire = 1;
        if (positionStr == "Cadre") {
            changeValue = "Non Cadre";
            cadre = 0;
            salaire = 1;
        } else if (positionStr == "Non Cadre") {
            changeValue = "Cadre";
            cadre = 1;
            salaire = 2;
        }
        jTablePosition.getModel().setValueAt(changeValue, jTablePosition.getSelectedRow(), 3);
        Singleton.requeteAction("update utilisateurs set cadre = " + cadre + ", salaire = " + salaire + " where id_utilisateur = " + id);
    }//GEN-LAST:event_jTablePositionMouseClicked

    /**
     * Cache la panel de modification de position 
     * @param evt 
     */
    private void jButtonRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetActionPerformed
        this.jPanelModif.setVisible(false);
    }//GEN-LAST:event_jButtonRetActionPerformed

    /**
     * Permet d'ajouter un nouvel email dans la bdd
     * @param evt 
     */
    private void jButtonAjoutEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjoutEmailActionPerformed
        String ajout = this.jTextFieldAjoutEmail.getText();
        DefaultListModel Select = (DefaultListModel) jListmail.getModel();
        Select.clear();
        try {
            Singleton.requeteAction("insert into cv_email (id_utilisateur, libelle_email) VALUES(" + personne.getId() + ",'" + ajout + "');");
            ResultSet lignesRetournees = Singleton.requeteSelection("select libelle_email from cv_email where id_utilisateur = " + personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString("libelle_email"));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.jTextFieldAjoutEmail.setText("");
    }//GEN-LAST:event_jButtonAjoutEmailActionPerformed
    
    /**
     * Permet de supprimer dans la bdd l'email selectionné.
     * @param evt 
     */
    private void jButtonSuppEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSuppEmailActionPerformed
        String texte = jListmail.getSelectedValue();
        DefaultListModel Select = (DefaultListModel) jListmail.getModel();
        Select.clear();
        try {
            Singleton.requeteAction("delete from cv_email where id_utilisateur = " + this.personne.getId() + " and libelle_email = '" + texte + "'");
            ResultSet lignesRetournees = Singleton.requeteSelection("select libelle_email from cv_email where id_utilisateur = " + this.personne.getId());
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();
                for (int i = 1; i <= longueur; i++) {
                    Select.addElement(lignesRetournees.getString("libelle_email"));
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSuppEmailActionPerformed

    /**
     * Cache les autres fenêtres possiblement visible, affiche le panel de promotion/retrogradation et affiche tout les employé de type "Employé" et "Responsable"
     * @param evt 
     */
    private void jMenuPromouvoirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPromouvoirActionPerformed
        this.jPanelFormation.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelCreation.setVisible(false);
        this.jPanelImage.setVisible(false);
        this.jPanelPromouv.setVisible(true);
        this.jPanelPromouv.setOpaque(false);
        String position = "";
        DefaultTableModel leModel = (DefaultTableModel) jTablePromouv.getModel();
        if (leModel.getRowCount() > 0) {
            for (int i = 0; i <= leModel.getRowCount(); i++) {
                if (i >= 1) {
                    leModel.removeRow(i - 1);
                } else {
                    leModel.removeRow(i);
                }
            }
        }
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select * from utilisateurs where position = 0 or position = 1");
            if (lignesRetournees.next()) {
                lignesRetournees.last();
                int longueur = lignesRetournees.getRow();
                lignesRetournees.first();

                for (int i = 1; i <= longueur; i++) {
                    if (lignesRetournees.getInt("position") == 0) {
                        position = "Employé";
                    } else if (lignesRetournees.getInt("position") == 1) {
                        position = "Responsable";
                    }
                    leModel.addRow(new Object[]{lignesRetournees.getInt("id_utilisateur"), lignesRetournees.getString("nom"), lignesRetournees.getString("prenom"), position});
                    if (i < longueur) {
                        lignesRetournees.next();
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuPromouvoirActionPerformed

    /**
     * Récupère l'employé selectionné et change la position, si c'est un employé, il deviendra responsable et inversement.
     * @param evt 
     */
    private void jTablePromouvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePromouvMouseClicked
        String positionStr = String.valueOf(jTablePromouv.getModel().getValueAt(jTablePromouv.getSelectedRow(), 3));
        System.out.println(positionStr);
        String id = String.valueOf(jTablePromouv.getModel().getValueAt(jTablePromouv.getSelectedRow(), 0));
        System.out.println(id);
        String changeValue = "";
        Integer position = 0;
        Integer salaire = 0;
        if (positionStr == "Responsable") {
            changeValue = "Employé";
            salaire = 2;
        } else if (positionStr == "Employé") {
            changeValue = "Responsable";
            position = 1;
            salaire = 4;
        }
        jTablePromouv.getModel().setValueAt(changeValue, jTablePromouv.getSelectedRow(), 3);
        Singleton.requeteAction("update utilisateurs set position = " + position + ", salaire = " + salaire + " where id_utilisateur = " + id);
    }//GEN-LAST:event_jTablePromouvMouseClicked

    /**
     * Ajoute le nouvel employé dans la bdd
     * @param evt 
     */
    private void jButtonValiderCreationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValiderCreationActionPerformed
        try {
            String nom = this.jTextFieldNom1.getText();
            String prenom = this.jTextFieldPrenom1.getText();
            String adresse_rue = this.jTextFieldAdresse1.getText();
            String adresse_cp = this.jTextFieldCP1.getText();
            String adresse_ville = this.jTextFieldVille1.getText();
            String tel_perso = this.jTextFieldTelPerso1.getText();
            String tel_pro = this.jTextFieldTelPro1.getText();
            int salaire = 1;
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date embauche = new Date();
            Integer position = 0;
            String email = this.jTextFieldAjoutEmail1.getText();
            String site = this.jTextFieldSite1.getText();
            String user = this.jTextFieldUser.getText();
            String mdp = this.jTextFieldMDP.getText();
            mdp = Outils.md5(mdp);

            Integer permis = 0;
            if (this.jRadioButtonYes.isSelected()) {
                permis = 1;
            }
            Integer cadre = 0;
            if (Outils.estUnEntier(nom) == false && Outils.estUnEntier(prenom) == false && Outils.estUnEntier(adresse_rue) == false && Outils.estUnEntier(adresse_cp) && Outils.estUnEntier(adresse_ville) == false && Outils.estUnEntier(tel_perso) && Outils.estUnEntier(tel_pro) && Outils.estUnEntier(site) == false && Outils.estUnEntier(user) == false && tel_perso.length() == 10 && tel_pro.length() == 10) {
                Singleton.requeteAction("INSERT INTO utilisateurs (nom, prenom, adresse_rue, adresse_cp, adresse_ville, tel_personnel, tel_professionnel, salaire, dateEmbauche, position, site_web, identifiant, mot_de_passe, permis, cadre) VALUES('" + nom + "','" + prenom + "','" + adresse_rue + "','" + adresse_cp + "','" + adresse_ville + "','" + tel_perso + "','" + tel_pro + "'," + salaire + ",'" + dateFormat.format(embauche) + "'," + position + ",'" + site + "','" + user + "','" + mdp + "'," + permis + "," + cadre + ")");
                ResultSet id = Singleton.requeteSelection("SELECT id_utilisateur from utilisateurs where nom = '" + nom + "' and prenom = '" + prenom + "'");
                if (id.next()) {
                    Singleton.requeteAction("INSERT INTO cv_email (id_utilisateur, libelle_email) VALUES(" + id.getInt("id_utilisateur") + ",'" + email + "')");
                }
                JOptionPane.showMessageDialog(rootPane, "Employé crée.");
                this.jTextFieldNom1.setText("");
                this.jTextFieldPrenom1.setText("");
                this.jTextFieldAdresse1.setText("");
                this.jTextFieldAjoutEmail1.setText("");
                this.jTextFieldCP1.setText("");
                this.jTextFieldSite1.setText("");
                this.jTextFieldTelPerso1.setText("");
                this.jTextFieldTelPro1.setText("");
                this.jTextFieldVille1.setText("");
                this.jTextFieldUser.setText("");
                this.jTextFieldMDP.setText("");
                this.jRadioButtonYes.setSelected(false);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Un champ a mal été renseigné.");
            }

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            String erreur = ex.getMessage();
            if ("empty String".equals(erreur)) {
                JOptionPane.showMessageDialog(rootPane, "Veuillez remplir tous les champs.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonValiderCreationActionPerformed

    /**
     * Vide tout les champs de la création
     * @param evt 
     */
    private void jButtonAnnulerRemplissageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerRemplissageActionPerformed
        this.jTextFieldNom1.setText("");
        this.jTextFieldPrenom1.setText("");
        this.jTextFieldAdresse1.setText("");
        this.jTextFieldAjoutEmail1.setText("");
        this.jTextFieldCP1.setText("");
        this.jTextFieldSite1.setText("");
        this.jTextFieldTelPerso1.setText("");
        this.jTextFieldTelPro1.setText("");
        this.jTextFieldVille1.setText("");
        this.jRadioButtonYes.setSelected(false);
    }//GEN-LAST:event_jButtonAnnulerRemplissageActionPerformed

    /**
     * Cache la panel de Création
     * @param evt 
     */
    private void jButtonRetour1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetour1ActionPerformed
        this.jPanelCreation.setVisible(false);
    }//GEN-LAST:event_jButtonRetour1ActionPerformed

    /**
     * Cache les autres fenêtres possiblement visible et affiche la panel de Creation
     * @param evt 
     */
    private void jMenuCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCreerActionPerformed
        this.jPanelFormation.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelPromouv.setVisible(false);
        this.jPanelCreation.setVisible(true);
        this.jPanelImage.setVisible(false);
        this.jPanelCreation.setOpaque(false);
    }//GEN-LAST:event_jMenuCreerActionPerformed

    /**
     * Cache les autres fenêtres possiblement visible et affiche le panel de choix d'image et de génération CV
     * @param evt 
     */
    private void MenuGenererCVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGenererCVActionPerformed
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelFormation.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelPromouv.setVisible(false);
        this.jPanelCreation.setVisible(false);
        this.jPanelImage.setVisible(true);
        this.jPanelImage.setOpaque(false);
    }//GEN-LAST:event_MenuGenererCVActionPerformed

    /**
     * Permet à l'utilisateur de choisir une image sur son ordinateur et de l'afficher à l'écran
     * @param evt 
     */
    private void jButtonChoixIimageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChoixIimageActionPerformed
        if (choixPhoto == null) {
            choixPhoto = new JFileChooser(".");
            choixPhoto.setFileFilter(new FileNameExtensionFilter("Images", "png", "jpg"));
        }
        choixPhoto.setCurrentDirectory(choixPhoto.getCurrentDirectory());
        choixPhoto.showOpenDialog(null);
        if (choixPhoto.getSelectedFile() == null) {
            choixPhoto = null;
        } else {
            this.lImage = new ImageIcon(choixPhoto.getSelectedFile().toString());
        }
        if (lImage != null) {
            jLabelPhoto.getGraphics().drawImage(lImage.getImage(), 0, 0, null);
        }
    }//GEN-LAST:event_jButtonChoixIimageActionPerformed

    /**
     * Ajoute la photo dans la bdd et génére le CV
     * @param evt 
     */
    private void jButtonGenerationCVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerationCVActionPerformed
        if(choixPhoto!= null){
        File monImage = new File(choixPhoto.getSelectedFile().getPath());
            FileInputStream istreamImage = null;
            try {
                istreamImage = new FileInputStream(monImage);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                try (PreparedStatement ps = Singleton.getInstance().prepareStatement("replace into cv_photo values ("+this.personne.getId()+",?)")) {
                    try {
                        ps.setBinaryStream(1, istreamImage, (int) monImage.length());
                    } catch (SQLException ex) {
                        Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }catch(SQLException ex){
                    Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
                }
            } finally {
                try {
                    istreamImage.close();
                } catch (IOException ex) {
                    Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        File file = new File(DEST);
        file.getParentFile().mkdirs();
        try {
            new CV().createPdf(DEST, this.personne);
            JOptionPane.showMessageDialog(rootPane, "PDF crée !");
        } catch (IOException | SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Erreur ! Fermez le PDF.");
        }
    }//GEN-LAST:event_jButtonGenerationCVActionPerformed

    /**
     * Cache le panel de génération de CV et d'image
     * @param evt 
     */
    private void ButtonRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRetourActionPerformed
        this.jPanelImage.setVisible(false);
    }//GEN-LAST:event_ButtonRetourActionPerformed

    /**
     * Précise le nom et la position de la personne connectée, affiche dans le menu les actions auquel il a, ou non, accès selon ta position, ajoute au salaire les 3% selon ses années d'ancienneté
     * @param leNom
     * @param laPosition 
     */
    public void connecte(String leNom, String laPosition) {
        //maj de l'etat de la connexion
        this.connecte = true;
        //ajout du nom dans la fenetre
        this.nomjMenu.setText("Connecté en tant que : " + leNom + ", Position : " + laPosition);
        this.nomjMenu.setEnabled(false);
        //On fait apparaître les bouttons que tout le monde peut voir, peu importe la position
        this.jMenuCV.setVisible(true);
        this.MenuInformation.setVisible(true);
        if (laPosition.equals("Responsable")) {
            this.jMenuAction.setVisible(true);
            this.jMenuModif.setVisible(true);
            this.jMenuCreer.setVisible(false);
            this.jMenuPromouvoir.setVisible(false);
        } else if (laPosition.equals("Directeur")) {
            this.jMenuAction.setVisible(true);
            this.jMenuCreer.setVisible(true);
            this.jMenuPromouvoir.setVisible(true);
            this.jMenuModif.setVisible(false);

        }
        try {
            ResultSet lignesRetournees = Singleton.requeteSelection("select * from utilisateurs where nom='" + leNom + "'");
            ResultSet salaires = Singleton.requeteSelection("select montant from salaire, utilisateurs where salaire.id_salaire = utilisateurs.salaire and nom='" + leNom + "'");
            if (lignesRetournees.next() && salaires.next()) {
                Float montant = salaires.getFloat("montant");
                Calendar calendar = new GregorianCalendar();
                Date embauche = lignesRetournees.getDate("dateEmbauche");
                calendar.setTime(embauche);
                DateFormat dateFormat = new SimpleDateFormat("yyyy");
                Date today = new Date();
                int difference = Integer.valueOf(dateFormat.format(today)) - calendar.get(Calendar.YEAR);
                Float salaire = montant + (difference * (montant * 3 / 100));
                this.personne = new Personne(lignesRetournees.getInt("id_utilisateur"), lignesRetournees.getString("nom"), lignesRetournees.getString("prenom"), lignesRetournees.getString("adresse_rue"), lignesRetournees.getString("adresse_cp"), lignesRetournees.getString("adresse_ville"), salaire, lignesRetournees.getString("tel_personnel"), lignesRetournees.getString("tel_professionnel"), lignesRetournees.getString("site_web"), laPosition, lignesRetournees.getInt("permis"), lignesRetournees.getInt("cadre"), difference);
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceGraphique.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Précise que la connexion n'est plus valable, cache dans le menu ce qui n'est plus utile et vide la liste de formation
     */
    public void deconnecte() {
        this.connecte = false;
        this.nomjMenu.setText(null);
        this.jMenuCV.setVisible(false);
        this.MenuInformation.setVisible(false);
        this.jMenuAction.setVisible(false);
        DefaultListModel Select = (DefaultListModel) jListeForm.getModel();
        Select.clear();
        this.jPanelFormation.setVisible(false);
        this.jPanelInfoPerso.setVisible(false);
        this.jPanelModif.setVisible(false);
        this.jPanelCreation.setVisible(false);
        this.jPanelPromouv.setVisible(false);
        this.jPanelImage.setVisible(false);
    }

    /**
     * Met à jour le menu en fonction de la connexion ou deconnexion
     */
    public void majConnexion() {
        deconnexionMenuItem.setEnabled(this.connecte);
        connexionMenuItem.setEnabled(!this.connecte);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceGraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceGraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceGraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceGraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceGraphique().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonRetour;
    private javax.swing.JMenuItem MenuGenererCV;
    private javax.swing.JMenu MenuInformation;
    private javax.swing.JMenuItem SortieMenuItem;
    private javax.swing.JMenuItem connexionMenuItem;
    private javax.swing.JMenuItem deconnexionMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButReturn;
    private javax.swing.JButton jButtonAjout;
    private javax.swing.JButton jButtonAjoutEmail;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonAnnulerRemplissage;
    private javax.swing.JButton jButtonChoixIimage;
    private javax.swing.JButton jButtonGenerationCV;
    private javax.swing.JButton jButtonPermis;
    private javax.swing.JButton jButtonRet;
    private javax.swing.JButton jButtonRetour;
    private javax.swing.JButton jButtonRetour1;
    private javax.swing.JButton jButtonReturn;
    private javax.swing.JButton jButtonSuppEmail;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonValider;
    private javax.swing.JButton jButtonValiderCreation;
    private javax.swing.JComboBox<String> jComboBoxInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelPermis;
    private javax.swing.JLabel jLabelPhoto;
    private javax.swing.JLabel jLabelPosition;
    private javax.swing.JLabel jLabelTitre;
    private javax.swing.JList<String> jListeForm;
    private javax.swing.JList<String> jListmail;
    private javax.swing.JMenu jMenuAction;
    private javax.swing.JMenu jMenuCV;
    private javax.swing.JMenuItem jMenuCreer;
    private javax.swing.JMenuItem jMenuFormations;
    private javax.swing.JMenuItem jMenuInfoPerso;
    private javax.swing.JMenuItem jMenuModif;
    private javax.swing.JMenuItem jMenuPromouvoir;
    private javax.swing.JPanel jPanelCreation;
    private javax.swing.JPanel jPanelFormation;
    private javax.swing.JPanel jPanelImage;
    private javax.swing.JPanel jPanelInfoPerso;
    private javax.swing.JPanel jPanelModif;
    private javax.swing.JPanel jPanelPromouv;
    private javax.swing.JRadioButton jRadioButtonYes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTablePosition;
    private javax.swing.JTable jTablePromouv;
    private javax.swing.JTextField jTextFieldAdresse;
    private javax.swing.JTextField jTextFieldAdresse1;
    private javax.swing.JTextField jTextFieldAjout;
    private javax.swing.JTextField jTextFieldAjoutEmail;
    private javax.swing.JTextField jTextFieldAjoutEmail1;
    private javax.swing.JTextField jTextFieldCP;
    private javax.swing.JTextField jTextFieldCP1;
    private javax.swing.JTextField jTextFieldMDP;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldNom1;
    private javax.swing.JTextField jTextFieldPrenom;
    private javax.swing.JTextField jTextFieldPrenom1;
    private javax.swing.JTextField jTextFieldSite;
    private javax.swing.JTextField jTextFieldSite1;
    private javax.swing.JTextField jTextFieldTelPerso;
    private javax.swing.JTextField jTextFieldTelPerso1;
    private javax.swing.JTextField jTextFieldTelPro;
    private javax.swing.JTextField jTextFieldTelPro1;
    private javax.swing.JTextField jTextFieldUser;
    private javax.swing.JTextField jTextFieldVille;
    private javax.swing.JTextField jTextFieldVille1;
    private javax.swing.JLabel labelAdresse;
    private javax.swing.JLabel labelAdresse1;
    private javax.swing.JLabel labelMail;
    private javax.swing.JLabel labelMail1;
    private javax.swing.JLabel labelNom;
    private javax.swing.JLabel labelNom1;
    private javax.swing.JLabel labelPosition;
    private javax.swing.JLabel labelPrenom;
    private javax.swing.JLabel labelPrenom1;
    private javax.swing.JLabel labelSalaire;
    private javax.swing.JLabel labelTelPerso;
    private javax.swing.JLabel labelTelPerso1;
    private javax.swing.JLabel labelTelPro;
    private javax.swing.JLabel labelTelPro1;
    private javax.swing.JLabel labelWeb;
    private javax.swing.JLabel labelWeb1;
    private javax.swing.JLabel labelduSalaire;
    private javax.swing.JMenuBar nomMenuBar;
    private javax.swing.JMenu nomjMenu;
    // End of variables declaration//GEN-END:variables
}
